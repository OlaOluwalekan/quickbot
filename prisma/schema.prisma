// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  tokens        Int         @default(10000)
  role          UserRole    @default(USER)
  accounts      Account[]
  chat          Chat[]
  bookmarks     Bookmark[]
  characters    Character[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Chat {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  createdBy  String     @db.ObjectId
  isShared   Boolean    @default(false) // ← new
  sharedWith String[] // ← new, array of user‑IDs
  roleId     String?    @db.ObjectId // ← optional foreign key
  role       Character? @relation(fields: [roleId], references: [id])
  tags       String[] // ← new

  response  Response[]
  user      User       @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  bookmarks Bookmark[] // back-relation to Bookmark
}

model Response {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId     String   @db.ObjectId
  question   String
  response   String
  createdAt  DateTime @default(now())
  isShared   Boolean  @default(false) // ← new
  sharedWith String[] // ← new
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model TokenUsage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  responseId String   @db.ObjectId
  token      Int
  usedAt     DateTime @default(now())
}

model TemplatePrompt {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  prompt   String
  category String
  createAt DateTime @default(now())
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model TemplateRole {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  roleType        String // e.g. "assistant", "user"
  roleDescription String
  createdAt       DateTime @default(now())
  createdBy       String   @db.ObjectId

  aiRoles Character[] // back-relation to AiRole
}

model Character {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  customRole      Boolean      @default(false) // for user‑created roles
  roleId          String       @db.ObjectId
  role            TemplateRole @relation(fields: [roleId], references: [id])
  voice           String? // e.g. voice identifier
  profileImageUrl String?
  isPublic        Boolean      @default(false) // for public roles
  createdBy       String       @db.ObjectId
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  user  User   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  chats Chat[] // back‑relation

  @@map("AiRole")
}
